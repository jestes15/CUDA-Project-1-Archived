// Inlcusion of header files for running CUDA in Visual Studio Pro 2019 (v142)
#include "cuda_runtime.h"
#include "device_launch_parameters.h"

// Inclusion of the required CUDA libriaries and header files
#include <curand.h>
#include <cuda.h>

// Inclusion of headers from the standard library in C
#include <stdio.h>
#include <stdlib.h>

#define CURAND_RNG_NON_DEFAULT 24

// Check method for checking the error status of a CUDA call
#define CUDA_CALL(x) do { if((x)!=cudaSuccess) { \
    printf("Error at %s:%d\n",__FILE__,__LINE__);\
    return EXIT_FAILURE;}} while(0)

// Check method for checking the error status of a cuRAND call
#define CURAND_CALL(x) do { if((x)!=CURAND_STATUS_SUCCESS) { \
    printf("Error at %s:%d\n",__FILE__,__LINE__);\
    return EXIT_FAILURE;}} while(0)

// The kernel, which runs on the GPU when called
__global__ void addKernel(int* a, int* b, int* c)
{
    int idx = threadIdx.x;
    c[idx] = a[idx] * b[idx];
}

// Function for generating the same results as the GPU kernel, used for verification of results
__host__ void KernelCPUEd(int* a, int* b, int* c, size_t size)
{
    for (int i = 0; i < size; i++)
        c[i] = a[i] * b[i];
}

// A number generator to population the arrays of nElem size
__host__ void numberGenerator(int* a, int* b, size_t size)
{
    srand(40);
    for (int i = 0; i < size; i++)
    {
        a[i] = rand() % 100;
        b[i] = rand() % 100;
    }
}

// Function for verifying the array generated by the kernel is correct
__host__ bool inline CHECK(int* a, int* b, size_t size)
{
    double epsilon = 1.0E-8;
    for (int x = 0; x < size; x++)
    {
        if (a[x] - b[x] > epsilon)
            return true;
    }
    return false;
}

// Entry point to the program
int main(void) {
    size_t nElem = 24;
    size_t nBytes = nElem * sizeof(int);

    int* h_A, * h_B, * h_C, * GpuRef;
    int* d_A, * d_B, * d_C;
    float* hostDevGen, * devNumGen;

    curandGenerator_t generator;

    // Allocation of memory on the host for transferring data from host to device and vice versa
    h_A = (int*)malloc(nBytes);
    h_B = (int*)malloc(nBytes);
    h_C = (int*)malloc(nBytes);
    GpuRef = (int*)malloc(nBytes);
    
    // ALlovation of memory on the device for storage of data needed by the kernel during runtime
    CUDA_CALL(cudaMalloc((int**)&d_A, nBytes));
    CUDA_CALL(cudaMalloc((int**)&d_B, nBytes));
    CUDA_CALL(cudaMalloc((int**)&d_C, nBytes));

    // Allocation of memory on host and device for testing the CUDA number generator
    hostDevGen = (float*)malloc(nBytes);
    CUDA_CALL(cudaMalloc((float**)&devNumGen, nBytes));

    // CUDA number generator function calls and return values
    CURAND_CALL(curandCreateGenerator(&generator, CURAND_RNG_PSEUDO_DEFAULT));
    CURAND_CALL(curandGenerateUniform(generator, devNumGen, nElem));

    //The number generator designed for use on the host device only
    numberGenerator(h_A, h_B, nElem);

    // Transfer of populated arrays to the device for use by the kernel
    CUDA_CALL(cudaMemcpy(d_A, h_A, nBytes, cudaMemcpyHostToDevice));
    CUDA_CALL(cudaMemcpy(d_B, h_B, nBytes, cudaMemcpyHostToDevice));

    // Kernel call to run the calculation n the GPU, uses 1 block and nElem amount of threads in the block
    // Max threads in a block for RTX 2060 is 32 threads
    addKernel<<<1, nElem>>>(d_A, d_B, d_C);

    // Verification function that the kernel on the GPU is performing properly
    KernelCPUEd(h_A, h_B, h_C, nElem);

    // Transfer of data from Device to the host
    CUDA_CALL(cudaMemcpy(GpuRef, d_C, nBytes, cudaMemcpyDeviceToHost));
    
    // Verification of data, compares data generated on the host to the data generated on the device
    // If he data is different, goto Exit is called and memory is freed, the the program ends
    if (CHECK(h_C, GpuRef, nElem))
    {
        printf("The arrays are not the same");
        goto Exit;
    }

    // An output for the data generated
    for (int index = 0; index < nElem; index++)
    {
        printf("The result of %d * %d is %d\n", h_A[index], h_B[index], GpuRef[index]);
    }

Exit:
    //Free device memory
    CUDA_CALL(cudaFree(d_A));
    CUDA_CALL(cudaFree(d_B));
    CUDA_CALL(cudaFree(d_C));

    //Free host memory
    free(h_A);
    free(h_B);
    free(h_C);

    // Allows for the user to see the output when running in Visual Studio Pro 2019 (v142)
    char a;
    scanf("%c", &a);

    return 0;
}